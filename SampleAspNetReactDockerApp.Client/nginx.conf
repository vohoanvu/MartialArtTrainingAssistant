events {
    worker_connections 1024;
}

# The main http block
http {
    # This map block is needed for your SignalR proxy sections for WebSocket support
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    # --- SERVER BLOCK 1: Handles HTTP (Port 80) ---
    # This block's only jobs are to handle Let's Encrypt validation
    # and redirect all other traffic to the secure HTTPS site.
    server {
        listen 80;
        listen [::]:80;

        # IMPORTANT: Change this to your actual domain or subdomain!
        server_name app.your-domain.com;

        # Route for Let's Encrypt validation challenges
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        # Redirect all other HTTP traffic to HTTPS with a 301 (permanent) redirect.
        location / {
            return 301 https://$host$request_uri;
        }
    }

    # --- SERVER BLOCK 2: Handles HTTPS (Port 443) ---
    # This is your main application server. It handles all secure traffic.
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        # IMPORTANT: Change this to your actual domain or subdomain!
        server_name app.your-domain.com;

        client_max_body_size 100M;

        # SSL Certificate paths (these point to the files inside the container)
        # Certbot will create these files for you.
        # IMPORTANT: The path here MUST match your server_name!
        ssl_certificate /etc/letsencrypt/live/app.your-domain.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/app.your-domain.com/privkey.pem;

        # Recommended SSL settings from Certbot
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        # --- Your Application's Proxy Logic ---
        # All of your original location blocks go here.

        location / {
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            try_files $uri $uri/ /index.html;
        }

        # SignalR hub endpoint
        location /videoShareHub {
            proxy_pass http://video-sharing:7081;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # SignalR hub endpoint
        location /videoAnalysisHub {
            proxy_pass http://video-sharing:7081;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /hangfire {
            proxy_pass http://video-sharing:7081;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        location /ws {
            proxy_pass http://fighter-manager:7080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }

        location /vid/api {
            proxy_pass http://video-sharing:7081/api;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api {
            proxy_pass http://fighter-manager:7080;
        }

        location /swagger {
            proxy_pass http://fighter-manager:7080/swagger;
        }

        location /vid/swagger {
            proxy_pass http://video-sharing:7081/swagger;
        }
    }
}