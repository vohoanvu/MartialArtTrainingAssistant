steps:
  - name: 'gcr.io/cloud-builders/git'
    args: ['clone', 'https://github.com/vohoanvu/MartialArtTrainingAssistant.git']
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    dir: 'MartialArtTrainingAssistant'
    args: ['dotnet', 'restore', 'FighterManager.Server/FighterManager.Server.csproj']
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    dir: 'MartialArtTrainingAssistant'
    args: ['dotnet', 'build', '--no-restore', 'FighterManager.Server/FighterManager.Server.csproj']
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    dir: 'MartialArtTrainingAssistant'
    args: ['dotnet', 'restore', 'VideoSharing.Server/VideoSharing.Server.csproj']
  - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
    dir: 'MartialArtTrainingAssistant'
    args: ['dotnet', 'build', '--no-restore', 'VideoSharing.Server/VideoSharing.Server.csproj']
  # - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
  #   dir: 'MartialArtTrainingAssistant'
  #   args: ['dotnet', 'restore', 'MatchMaker.Server/MatchMaker.Server.csproj']
  # - name: 'mcr.microsoft.com/dotnet/sdk:8.0'
  #   dir: 'MartialArtTrainingAssistant'
  #   args: ['dotnet', 'build', '--no-restore', 'MatchMaker.Server/MatchMaker.Server.csproj']
  - name: 'node:18'
    dir: 'MartialArtTrainingAssistant/SampleAspNetReactDockerApp.Client'
    args: ['npm', 'install']
  - name: 'node:18'
    dir: 'MartialArtTrainingAssistant/SampleAspNetReactDockerApp.Client'
    args: ['npm', 'run', 'build']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/codejitsu-repo/frontend:$SHORT_SHA', '-f', 'SampleAspNetReactDockerApp.Client/Dockerfile', 'SampleAspNetReactDockerApp.Client']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/codejitsu-repo/fighter-manager:$SHORT_SHA', '-f', 'FighterManager.Server/Dockerfile', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/codejitsu-repo/video-sharing:$SHORT_SHA', '-f', 'VideoSharing.Server/Dockerfile', '.']
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['build', '-t', 'us-central1-docker.pkg.dev/$PROJECT_ID/codejitsu-repo/match-maker:$SHORT_SHA', '-f', 'MatchMaker.Server/Dockerfile', '.']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/codejitsu-repo/frontend:$SHORT_SHA']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/codejitsu-repo/fighter-manager:$SHORT_SHA']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/codejitsu-repo/video-sharing:$SHORT_SHA']
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/codejitsu-repo/match-maker:$SHORT_SHA']
  - name: 'busybox'
    entrypoint: 'sh'
    args:
      - '-c'
      - |
        echo "DEBUG SHORT_SHA: $SHORT_SHA"
        echo "DEBUG PROJECT_ID: $PROJECT_ID"
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args: ['generate-yaml.sh']
    env:
      - 'SHORT_SHA=$SHORT_SHA'
      - 'PROJECT_ID=$PROJECT_ID'
  # Install gettext for envsubst
  # - name: 'ubuntu'
  #   args:
  #     - 'bash'
  #     - '-c'
  #     - 'apt-get update && apt-get install -y gettext-base'
  # Fetch secrets, base64-encode, and generate secrets.yaml
  # - name: 'ubuntu'
  #   args:
  #     - 'bash'
  #     - '-c'
  #     - |
  #       export JWT_KEY_B64=$(echo -n $JWT_KEY | base64) && \
  #       export DB_PASSWORD_B64=$(echo -n $DB_PASSWORD | base64) && \
  #       export GOOGLE_CLIENT_SECRET_B64=$(echo -n $GOOGLE_CLIENT_SECRET | base64) && \
  #       envsubst < k8s/test/secrets-template.yaml > k8s/test/secrets.yaml
  #   secretEnv: ['JWT_KEY', 'DB_PASSWORD', 'GOOGLE_CLIENT_SECRET']
  # Apply the cert-manager ClusterIssuer FIRST
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/test/letsencrypt-staging-issuer.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
    id: 'Apply Staging Issuer'
  # - name: 'gcr.io/cloud-builders/kubectl'
  #   args: ['apply', '-f', 'k8s/test/secrets.yaml', '--namespace=test']
  #   env:
  #     - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
  #     - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
  #   waitFor: ['Apply Staging Issuer']
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/test/configmap.yaml', '--namespace=test']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
  - name: 'gcr.io/cloud-builders/kubectl' # Apply the first ingress
    args: ['apply', '-f', 'k8s/test/ingress-api-rewrite.yaml', '--namespace=test']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
    waitFor: ['Apply Staging Issuer']
  - name: 'gcr.io/cloud-builders/kubectl' # Apply the second ingress
    args: ['apply', '-f', 'k8s/test/ingress-no-rewrite.yaml', '--namespace=test']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
    waitFor: ['Apply Staging Issuer']
  - name: 'gcr.io/cloud-builders/kubectl' # Apply the third ingress
    args: ['apply', '-f', 'k8s/test/ingress-swagger-rewrite.yaml', '--namespace=test']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
    waitFor: ['Apply Staging Issuer']
  # - name: 'gcr.io/cloud-builders/kubectl'
  #   args: ['apply', '-f', 'k8s/test/nginx-configmap.yaml', '--namespace=test']
  #   env:
  #     - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
  #     - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/test/generated/frontend-deployment.yaml', '--namespace=test']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/test/generated/fighter-manager-deployment.yaml', '--namespace=test']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/test/generated/video-sharing-deployment.yaml', '--namespace=test']
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
      - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
  # - name: 'gcr.io/cloud-builders/kubectl'
  #   args: ['apply', '-f', 'k8s/test/generated/match-maker-deployment.yaml', '--namespace=test']
  #   env:
  #     - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
  #     - 'CLOUDSDK_CONTAINER_CLUSTER=codejitsu-cluster'
# Define secrets from Secret Manager
# availableSecrets:
#   secretManager:
#   - versionName: projects/$PROJECT_ID/secrets/jwt-key/versions/latest
#     env: JWT_KEY
#   - versionName: projects/$PROJECT_ID/secrets/supabase-db-connection/versions/latest
#     env: SUPABASE_DB_CONNECTION
#   - versionName: projects/$PROJECT_ID/secrets/google-cloud-sa-key/versions/latest
#     env: GOOGLE_CLOUD_SA_KEY
options:
  substitution_option: 'ALLOW_LOOSE'
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _SHORT_SHA: ${SHORT_SHA}
timeout: 1200s