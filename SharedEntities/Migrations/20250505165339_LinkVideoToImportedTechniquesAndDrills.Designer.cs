// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SharedEntities.Data;

#nullable disable

namespace SharedEntities.Migrations
{
    [DbContext(typeof(MyDatabaseContext))]
    [Migration("20250505165339_LinkVideoToImportedTechniquesAndDrills")]
    partial class LinkVideoToImportedTechniquesAndDrills
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SharedEntities.Models.AiAnalysisResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalysisJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("AreasForImprovement")
                        .HasColumnType("text");

                    b.Property<string>("OverallDescription")
                        .HasColumnType("text");

                    b.Property<string>("Strengths")
                        .HasColumnType("text");

                    b.Property<int>("VideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisJson");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AnalysisJson"), "GIN");

                    b.HasIndex("VideoId");

                    b.ToTable("AiAnalysisResults");
                });

            modelBuilder.Entity("SharedEntities.Models.AiFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AnalysisJson")
                        .HasColumnType("jsonb");

                    b.Property<TimeSpan?>("EndTimestamp")
                        .HasColumnType("interval");

                    b.Property<TimeSpan?>("StartTimestamp")
                        .HasColumnType("interval");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("integer");

                    b.Property<int>("VideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisJson");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AnalysisJson"), "GIN");

                    b.HasIndex("TechniqueId");

                    b.HasIndex("VideoId");

                    b.ToTable("AiFeedbacks");
                });

            modelBuilder.Entity("SharedEntities.Models.AppUserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 5, 5, 16, 53, 38, 616, DateTimeKind.Utc).AddTicks(8410));

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("FighterId")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2025, 5, 5, 16, 53, 38, 616, DateTimeKind.Utc).AddTicks(8880));

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("FighterId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("app_users", (string)null);
                });

            modelBuilder.Entity("SharedEntities.Models.Curriculum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Module")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Curriculums");
                });

            modelBuilder.Entity("SharedEntities.Models.CurriculumScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurriculumId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionalScenarioId")
                        .HasColumnType("integer");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CurriculumId");

                    b.HasIndex("PositionalScenarioId");

                    b.ToTable("CurriculumScenarios");
                });

            modelBuilder.Entity("SharedEntities.Models.Demonstration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TechniqueTag")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("Demonstrations");
                });

            modelBuilder.Entity("SharedEntities.Models.Drills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AiAnalysisResultId")
                        .HasColumnType("integer");

                    b.Property<int?>("DemonstrationId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<int?>("FeedbackId")
                        .HasColumnType("integer");

                    b.Property<string>("Focus")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("integer");

                    b.Property<int?>("UploadedVideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AiAnalysisResultId");

                    b.HasIndex("DemonstrationId");

                    b.HasIndex("FeedbackId");

                    b.HasIndex("TechniqueId");

                    b.HasIndex("UploadedVideoId");

                    b.ToTable("Drills");
                });

            modelBuilder.Entity("SharedEntities.Models.Fighter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("BMI")
                        .HasColumnType("double precision");

                    b.Property<int>("BelkRank")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<string>("FighterName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<double>("Height")
                        .HasColumnType("double precision");

                    b.Property<int>("MaxWorkoutDuration")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Fighters");
                });

            modelBuilder.Entity("SharedEntities.Models.HumanFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AiFeedbackId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("EndTimestamp")
                        .HasColumnType("interval");

                    b.Property<string>("InstructorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("StartTimestamp")
                        .HasColumnType("interval");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("integer");

                    b.Property<int>("VideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AiFeedbackId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("TechniqueId");

                    b.HasIndex("VideoId");

                    b.ToTable("HumanFeedback");
                });

            modelBuilder.Entity("SharedEntities.Models.PointScoringTechnique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("MartialArt")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PointScoringTechniques");
                });

            modelBuilder.Entity("SharedEntities.Models.PositionalScenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FocusModule")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TargetLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PositionalScenarios");
                });

            modelBuilder.Entity("SharedEntities.Models.SharedVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateShared")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SharedVideos");
                });

            modelBuilder.Entity("SharedEntities.Models.TechniqueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PositionalScenarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PositionalScenarioId");

                    b.ToTable("TechniqueTypes");
                });

            modelBuilder.Entity("SharedEntities.Models.Techniques", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AiAnalysisResultId")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<int?>("DemonstrationId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TechniqueTypeId")
                        .HasColumnType("integer");

                    b.Property<int?>("UploadedVideoId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AiAnalysisResultId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DemonstrationId");

                    b.HasIndex("TechniqueTypeId");

                    b.HasIndex("UploadedVideoId");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("SharedEntities.Models.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<double>("Duration")
                        .HasColumnType("double precision");

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<int>("MartialArt")
                        .HasColumnType("integer");

                    b.Property<string>("SessionNotes")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TargetLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("SharedEntities.Models.TrainingSessionFighterJoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FighterId")
                        .HasColumnType("integer");

                    b.Property<int>("TrainingSessionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FighterId");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("TrainingSessionFighterJoints");
                });

            modelBuilder.Entity("SharedEntities.Models.TrainingSessionTechniqueJoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DrillId")
                        .HasColumnType("integer");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("SessionId")
                        .HasColumnType("integer");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DrillId");

                    b.HasIndex("SessionId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("TrainingSessionTechniqueJoints");
                });

            modelBuilder.Entity("SharedEntities.Models.UploadedVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AISummary")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MartialArt")
                        .HasColumnType("integer");

                    b.Property<string>("StudentIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadTimestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UploadedVideos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SharedEntities.Models.AppUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SharedEntities.Models.AppUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.AppUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SharedEntities.Models.AppUserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedEntities.Models.AiAnalysisResult", b =>
                {
                    b.HasOne("SharedEntities.Models.UploadedVideo", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Video");
                });

            modelBuilder.Entity("SharedEntities.Models.AiFeedback", b =>
                {
                    b.HasOne("SharedEntities.Models.Techniques", "Technique")
                        .WithMany()
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.UploadedVideo", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technique");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("SharedEntities.Models.AppUserEntity", b =>
                {
                    b.HasOne("SharedEntities.Models.Fighter", "Fighter")
                        .WithOne()
                        .HasForeignKey("SharedEntities.Models.AppUserEntity", "FighterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fighter");
                });

            modelBuilder.Entity("SharedEntities.Models.CurriculumScenario", b =>
                {
                    b.HasOne("SharedEntities.Models.Curriculum", "Curriculum")
                        .WithMany("Scenarios")
                        .HasForeignKey("CurriculumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.PositionalScenario", "PositionalScenario")
                        .WithMany()
                        .HasForeignKey("PositionalScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curriculum");

                    b.Navigation("PositionalScenario");
                });

            modelBuilder.Entity("SharedEntities.Models.Demonstration", b =>
                {
                    b.HasOne("SharedEntities.Models.AppUserEntity", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("SharedEntities.Models.Drills", b =>
                {
                    b.HasOne("SharedEntities.Models.AiAnalysisResult", null)
                        .WithMany("Drills")
                        .HasForeignKey("AiAnalysisResultId");

                    b.HasOne("SharedEntities.Models.Demonstration", "DemonstrationVideo")
                        .WithMany()
                        .HasForeignKey("DemonstrationId");

                    b.HasOne("SharedEntities.Models.HumanFeedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("FeedbackId");

                    b.HasOne("SharedEntities.Models.Techniques", "Technique")
                        .WithMany()
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.UploadedVideo", null)
                        .WithMany("Drills")
                        .HasForeignKey("UploadedVideoId");

                    b.Navigation("DemonstrationVideo");

                    b.Navigation("Feedback");

                    b.Navigation("Technique");
                });

            modelBuilder.Entity("SharedEntities.Models.HumanFeedback", b =>
                {
                    b.HasOne("SharedEntities.Models.AiFeedback", "AiFeedback")
                        .WithMany()
                        .HasForeignKey("AiFeedbackId");

                    b.HasOne("SharedEntities.Models.AppUserEntity", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.Techniques", "Technique")
                        .WithMany()
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.UploadedVideo", "Video")
                        .WithMany()
                        .HasForeignKey("VideoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AiFeedback");

                    b.Navigation("Instructor");

                    b.Navigation("Technique");

                    b.Navigation("Video");
                });

            modelBuilder.Entity("SharedEntities.Models.SharedVideo", b =>
                {
                    b.HasOne("SharedEntities.Models.AppUserEntity", "SharedBy")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SharedBy");
                });

            modelBuilder.Entity("SharedEntities.Models.TechniqueType", b =>
                {
                    b.HasOne("SharedEntities.Models.PositionalScenario", "PositionalScenario")
                        .WithMany()
                        .HasForeignKey("PositionalScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionalScenario");
                });

            modelBuilder.Entity("SharedEntities.Models.Techniques", b =>
                {
                    b.HasOne("SharedEntities.Models.AiAnalysisResult", null)
                        .WithMany("Techniques")
                        .HasForeignKey("AiAnalysisResultId");

                    b.HasOne("SharedEntities.Models.PointScoringTechnique", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("SharedEntities.Models.Demonstration", "DemonstrationVideo")
                        .WithMany()
                        .HasForeignKey("DemonstrationId");

                    b.HasOne("SharedEntities.Models.TechniqueType", "TechniqueType")
                        .WithMany()
                        .HasForeignKey("TechniqueTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.UploadedVideo", null)
                        .WithMany("Techniques")
                        .HasForeignKey("UploadedVideoId");

                    b.Navigation("Category");

                    b.Navigation("DemonstrationVideo");

                    b.Navigation("TechniqueType");
                });

            modelBuilder.Entity("SharedEntities.Models.TrainingSession", b =>
                {
                    b.HasOne("SharedEntities.Models.Fighter", "Instructor")
                        .WithMany()
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("SharedEntities.Models.TrainingSessionFighterJoint", b =>
                {
                    b.HasOne("SharedEntities.Models.Fighter", "Fighter")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("FighterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.TrainingSession", "TrainingSession")
                        .WithMany("Students")
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fighter");

                    b.Navigation("TrainingSession");
                });

            modelBuilder.Entity("SharedEntities.Models.TrainingSessionTechniqueJoint", b =>
                {
                    b.HasOne("SharedEntities.Models.Drills", "Drill")
                        .WithMany()
                        .HasForeignKey("DrillId");

                    b.HasOne("SharedEntities.Models.TrainingSession", "Session")
                        .WithMany("SessionContents")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedEntities.Models.Techniques", "Technique")
                        .WithMany()
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drill");

                    b.Navigation("Session");

                    b.Navigation("Technique");
                });

            modelBuilder.Entity("SharedEntities.Models.UploadedVideo", b =>
                {
                    b.HasOne("SharedEntities.Models.AppUserEntity", "AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("SharedEntities.Models.AiAnalysisResult", b =>
                {
                    b.Navigation("Drills");

                    b.Navigation("Techniques");
                });

            modelBuilder.Entity("SharedEntities.Models.Curriculum", b =>
                {
                    b.Navigation("Scenarios");
                });

            modelBuilder.Entity("SharedEntities.Models.Fighter", b =>
                {
                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("SharedEntities.Models.TrainingSession", b =>
                {
                    b.Navigation("SessionContents");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SharedEntities.Models.UploadedVideo", b =>
                {
                    b.Navigation("Drills");

                    b.Navigation("Techniques");
                });
#pragma warning restore 612, 618
        }
    }
}
